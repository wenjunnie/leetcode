给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。
一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。


示例 1:
输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"

提示：
    0 <= num < 231

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int translateNum(int num) {
        if (num < 10) return 1;
        String s = String.valueOf(num);
        int[] arr = new int[s.length()];
        arr[0] = 1;
        String tmp = s.substring(0,2);
        if (Integer.parseInt(tmp) > 25 || tmp.charAt(0) == '0') {
            arr[1] = 1;
        } else {
            arr[1] = 2;
        }
        for (int i = 2; i < s.length(); i++) {
            String tmps = s.substring(i-1,i+1);
            if (Integer.parseInt(tmps) > 25 || tmps.charAt(0) == '0') {
                arr[i] = arr[i-1];
            } else {
                arr[i] = arr[i-1] + arr[i-2];
            }
        }
        return arr[arr.length-1];
    }
}