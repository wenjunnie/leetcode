输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

示例 1：
输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]

示例 2：
输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]

限制：
    0 <= matrix.length <= 100
    0 <= matrix[i].length <= 100

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0) return new int[]{};
        int[] res = new int[matrix.length * matrix[0].length];
        int up = 0, down = matrix.length-1, left = 0, right = matrix[0].length-1, index = 0;
        while (up <= down && left <= right) {
            for(int i = left; i <= right; i++) res[index++] = matrix[up][i];
            up++;
            for(int i = up; i <= down; i++) res[index++] = matrix[i][right];
            right--;
            if(up <= down) {
                for(int i = right; i >= left; i--) res[index++] = matrix[down][i];
                down--;
            }
            if(left <= right) {
                for(int i = down; i >= up; i--) res[index++] = matrix[i][left];
                left++;
            }
        }
        return res;
    }
}