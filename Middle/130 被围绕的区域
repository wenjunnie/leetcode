给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。
找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

示例:
X X X X
X O O X
X X O X
X O X X

运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X

解释:
被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/surrounded-regions
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    private int[][] flag3 = {{-1,0},{0,1},{1,0},{0,-1}};
    private boolean[][] matrix3;
    public void solve(char[][] board) {
        if (board.length == 0) return;
        matrix3 = new boolean[board.length][board[0].length];
        for (int i = 0; i < board[0].length; i++) {
            if (board[0][i] == 'O') {
                printX(board, 0, i);
            }
            if (board[board.length-1][i] == 'O') {
                printX(board, board.length-1, i);
            }
        }
        for (int i = 1; i < board.length-1; i++) {
            if (board[i][0] == 'O') {
                printX(board,i,0);
            }
            if (board[i][board[0].length-1] == 'O') {
                printX(board,i,board[0].length-1);
            }
        }
        for (int i = 0; i < matrix3.length; i++) {
            for (int j = 0; j < matrix3[0].length; j++) {
                if (!matrix3[i][j]) {
                    board[i][j] = 'X';
                }
            }
        }
    }

    public void printX(char[][] board, int row, int col) {
        if (board[row][col] == 'O') {
            matrix3[row][col] = true;
            for (int i = 0; i < flag3.length; i++) {
                int newX = row + flag3[i][0];
                int newY = col + flag3[i][1];
                if (judgeScope(newX,newY) && !matrix3[newX][newY]) {
                    printX(board, newX, newY);
                }
            }
        }
    }

    public boolean judgeScope(int x, int y) {
        return x >= 0 && x < matrix3.length && y >= 0 && y < matrix3[0].length;
    }
}
