给定一个二维网格和一个单词，找出该单词是否存在于网格中。
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true.
给定 word = "SEE", 返回 true.
给定 word = "ABCB", 返回 false.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-search
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    private boolean[][] matrix;
    private char[][] board;
    private String word;
    private int[][] flag = {{-1,0},{0,1},{1,0},{0,-1}};
    public boolean exist(char[][] board, String word) {
        if(board.length == 0 || board[0].length == 0) return false;
        matrix = new boolean[board.length][board[0].length];
        this.board = board;
        this.word = word;
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                if(DFS(i,j,0)) return true;
            }
        }
        return false;
    }

    public boolean DFS(int i, int j, int index) {
        if(board[i][j] == word.charAt(index) && index == word.length()-1) return true;
        if(board[i][j] == word.charAt(index)) {
            matrix[i][j] = true;
            for(int k = 0; k < 4; k++) {
                int newI = i + flag[k][0];
                int newJ = j + flag[k][1];
                if(judge(newI,newJ) && !matrix[newI][newJ]) {
                    if(DFS(newI,newJ,index+1)) return true;
                }
            }
            matrix[i][j] = false;
        }
        return false;
    }

    public boolean judge(int x, int y) {
        return x>=0 && x < board.length && y>=0 && y < board[0].length;
    }
}
