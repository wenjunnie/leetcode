假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
你可以假设数组中不存在重复的元素。
你的算法时间复杂度必须是 O(log n) 级别。

示例 1:
输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4

示例 2:
输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 1 && nums[0] == target) return 0;
        int begin = 0, end = nums.length-1;
        while (begin < end) {
            int mid = (begin+end)>>>1;
            if(nums[mid] == target) return mid;
            if(end-begin == 1) {
                if (nums[begin] == target) return begin;
                else if (nums[end] == target) return end;
                else return -1;
            }
            if(nums[mid] < nums[end]) {//右边有序
                if(nums[mid+1] > target) end = mid-1;
                else if(nums[mid+1] < target) {
                    if(nums[end] < target) end = mid-1;
                    else if(nums[end] > target) begin = mid+1;
                    else return end;
                }
                else return mid+1;
            } else if(nums[mid] > nums[end]) {//左边有序
                if(nums[mid-1] < target) begin = mid+1;
                else if(nums[mid-1] > target) {
                    if(nums[begin] < target) end = mid-1;
                    else if(nums[begin] > target) begin = mid+1;
                    else return begin;
                }
                else return mid-1;
            }
        }
        if(begin == end && nums[begin] == target) return begin;
        return -1;
    }
}
