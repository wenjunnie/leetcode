给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。
规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。
请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。

提示：
    输出坐标的顺序不重要
    m 和 n 都小于150

示例：
给定下面的 5x5 矩阵:

  太平洋 ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * 大西洋

返回:
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/pacific-atlantic-water-flow
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    private int[][] flag4 = {{-1,0},{0,-1},{0,1},{1,0}};
    private boolean[][] pacific;
    private boolean[][] atlantic;
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        List<List<Integer>> lists = new ArrayList<>();
        if (matrix.length == 0) return lists;
        pacific = new boolean[matrix.length][matrix[0].length];
        atlantic = new boolean[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix[0].length; i++) {
            toPacificAndAtlantic(matrix,pacific,0,i);
        }
        for (int i = 0; i < matrix.length; i++) {
            toPacificAndAtlantic(matrix,pacific,i,0);
        }
        for (int i = 0; i < matrix[0].length; i++) {
            toPacificAndAtlantic(matrix,atlantic,matrix.length-1,i);
        }
        for (int i = 0; i < matrix.length; i++) {
            toPacificAndAtlantic(matrix,atlantic,i,matrix[0].length-1);
        }
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (pacific[i][j] && atlantic[i][j]) lists.add(new ArrayList<>(Arrays.asList(i,j)));
            }
        }
        return lists;
    }

    public void toPacificAndAtlantic(int[][] matrix, boolean[][] visited, int row, int col) {
        if (visited[row][col]) return;
        visited[row][col] = true;
        for (int i = 0; i < 4; i++) {
            int newX = row + flag4[i][0];
            int newY = col + flag4[i][1];
            if (judgeScope(newX,newY) && !visited[newX][newY] && matrix[newX][newY] >= matrix[row][col]) {
                toPacificAndAtlantic(matrix,visited,newX,newY);
            }
        }
    }

    public boolean judgeScope(int x, int y) {
        return x >= 0 && x < pacific.length && y >= 0 && y < pacific[0].length;
    }
}
