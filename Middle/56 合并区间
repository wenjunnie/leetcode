给出一个区间的集合，请合并所有重叠的区间。

示例 1:
输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].

示例 2:
输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-intervals
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length == 0 || intervals[0].length == 0) return new int[][]{};
        if(intervals.length == 1) return intervals;
        List<List<Integer>> list = new ArrayList<>();
        for(int i = 0; i < intervals.length; i++) {
            List<Integer> list2 = new ArrayList<>();
            for (int j = 0; j < intervals[0].length; j++) {
                list2.add(intervals[i][j]);
            }
            list.add(list2);
        }
        Collections.sort(list, new Comparator<List<Integer>>() {
            @Override
            public int compare(List<Integer> o1, List<Integer> o2) {
                return o1.get(0).compareTo(o2.get(0));
            }
        });
        List<List<Integer>> list4 = new ArrayList<>();
        int temp = 0;
        label:
        for(int i = 0; i < list.size(); i = temp) {
            List<Integer> list3 = new ArrayList<>();
            if(i == list.size() - 1 && list.get(i).get(1) <= list4.get(list4.size()-1).get(1)) break;
            if(i == list.size() - 1 && list.get(i).get(1) > list4.get(list4.size()-1).get(1)) {
                list4.add(list.get(i));
                break;
            }
            for(int j = i + 1; j < list.size(); j++) {
                if(list3.isEmpty()) {
                    list3.add(list.get(i).get(0));
                    list3.add(list.get(i).get(1));
                }
                if(list.get(j).get(0) <= list3.get(1)) {
                    list3.set(1,Math.max(list3.get(1),list.get(j).get(1)));
                    if(j == list.size()-1) {
                        temp = j;
                        list4.add(list3);
                    }
                }else {
                    temp = j;
                    list4.add(list3);
                    continue label;
                }
            }
        }
        int[][] arr = new int[list4.size()][2];
        for(int i = 0; i < list4.size(); i++) {
            for(int j = 0; j < 2; j++) {
                if(j == 0) {
                    arr[i][j] = list4.get(i).get(0);
                }else {
                    arr[i][j] = list4.get(i).get(1);
                }
            }
        }
        return arr;
    }
}
