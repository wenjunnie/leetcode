给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

返回锯齿形层次遍历如下：
[
  [3],
  [20,9],
  [15,7]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new ArrayDeque<>();
        if(root != null) queue.offer(root);
        int index = 1;
        while (!queue.isEmpty()) {
            int num = 0;
            List<Integer> list2 = new ArrayList<>();
            for(int i = 0; i < index; i++) {
                TreeNode node = queue.poll();
                list2.add(node.val);
                if(node.left != null) {
                    queue.offer(node.left);
                    num++;
                }
                if(node.right != null) {
                    queue.offer(node.right);
                    num++;
                }
            }
            index = num;
            list.add(list2);
        }
        for(int i = 0; i < list.size(); i++) {
            if(i % 2 == 1) {
                for(int j = 0; j < list.get(i).size()/2; j++) {
                    int temp = list.get(i).get(j);
                    list.get(i).set(j,list.get(i).get(list.get(i).size()-j-1));
                    list.get(i).set(list.get(i).size()-j-1,temp);
                }
            }
        }
        return list;
    }
}
