给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:
输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]

示例 2:
输入: nums = [1], k = 1
输出: [1]

说明：
    你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
    你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/top-k-frequent-elements
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

import javafx.util.Pair;
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Queue<Pair<Integer,Integer>> queue = new PriorityQueue<>((o1, o2) -> o1.getValue().compareTo(o2.getValue()));
        Map<Integer,Integer> map = new HashMap<>();
        LinkedList<Integer> list = new LinkedList<>();
        for (int i = 0; i < nums.length; i++) {
            if (!map.containsKey(nums[i])) map.put(nums[i],1);
            else map.put(nums[i],map.get(nums[i])+1);
        }
        for (Map.Entry<Integer,Integer> key : map.entrySet()) {
            queue.offer(new Pair<>(key.getKey(), key.getValue()));
            if (queue.size() > k) queue.poll();
        }
        while (!queue.isEmpty()) {
            list.addFirst(queue.poll().getKey());
        }
        return list;
    }
}
