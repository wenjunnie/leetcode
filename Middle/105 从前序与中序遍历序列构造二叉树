根据一棵树的前序遍历与中序遍历构造二叉树。
注意:
你可以假设树中没有重复的元素。

例如，给出
前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]

返回如下的二叉树：
    3
   / \
  9  20
    /  \
   15   7

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int[] preorder, inorder;
    int target = 0;
    Map<Integer,Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.preorder = preorder;
        this.inorder = inorder;
        int num = 0;
        for(Integer key : inorder) {
            map.put(key,num);
            num++;
        }
        return helper(0,inorder.length);
    }

    public TreeNode helper(int left, int right) {
        if(left == right) return null;
        int pre = preorder[target];
        target++;
        TreeNode root = new TreeNode(pre);
        int index = map.get(pre);
        root.left = helper(left, index);
        root.right = helper(index+1, right);
        return root;
    }
}
