给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。

示例: 
输入: s = 7, nums = [2,3,1,2,4,3]
输出: 2
解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。

进阶:
如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

法一：
class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int l = 0, r = -1, sum = 0, min = Integer.MAX_VALUE;
        while (l < nums.length) {
            if(r+1 < nums.length && sum < s) {
                sum += nums[++r];
            } else {
                sum -= nums[l++];
            }
            if (sum >= s) min = Math.min(min,r-l+1);
        }
        if(min == Integer.MAX_VALUE) return 0;
        else return min;
    }
}

法二：
class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int l = 0, r = 0, sum = 0, min = Integer.MAX_VALUE;
        if(nums.length == 0) return 0;
        while (r <= nums.length) {
            if (sum < s) {
                if(r < nums.length)
                    sum += nums[r++];
                else r++;
            } else if(sum > s) {
                min = Math.min(min,r-l);
                sum -= nums[l];
                l++;
            } else {
                min = Math.min(min,r-l);
                if (r < nums.length)
                    sum += nums[r++];
                else r++;
            }
        }
        if(min == Integer.MAX_VALUE) return 0;
        else return min;
    }
}
