给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:
输入:
11110
11010
11000
00000
输出: 1

示例 2:
输入:
11000
11000
00100
00011
输出: 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-islands
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    private int[][] flag2 = {{-1,0},{0,1},{1,0},{0,-1}};
    private boolean[][] matrix2;
    public int numIslands(char[][] grid) {
        int sum = 0;
        if (grid.length == 0 || grid[0].length == 0) return 0;
        matrix2 = new boolean[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    sum++;
                    floodFill(grid, i, j);
                }
            }
        }
        return sum;
    }

    public void floodFill(char[][] grid, int row, int col) {
        if (grid[row][col] == '0') return;
        if (grid[row][col] == '1') {
            grid[row][col] = '2';
            matrix2[row][col] = true;
            for (int i = 0; i < flag2.length; i++) {
                int newX = row + flag2[i][0];
                int newY = col + flag2[i][1];
                if (judgeScope(newX, newY) && !matrix2[newX][newY]) {
                    floodFill(grid, newX, newY);
                }
            }
            matrix2[row][col] = false;
        }
    }
    
    public boolean judgeScope(int x, int y) {
        return x >=0 && x < matrix2.length && y >= 0 && y < matrix2[0].length;
    }
}
