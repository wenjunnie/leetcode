给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。
American keyboard

示例：
输入: ["Hello", "Alaska", "Dad", "Peace"]
输出: ["Alaska", "Dad"]

注意：
    你可以重复使用键盘上同一字符。
    你可以假设输入的字符串将只包含字母。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/keyboard-row
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public String[] findWords(String[] words) {
        char[] chars1 = {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'};
        char[] chars2 = {'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'};
        char[] chars3 = {'z', 'x', 'c', 'v', 'b', 'n', 'm'};
        List<String> list = new ArrayList<>();
        String[] result = new String[list.size()];
        for (int i = 0; i < words.length; i++) {
            int num1 = 0,num2 = 0, num3 = 0;
            for (int j = 0; j < words[i].length(); j++) {
                for (int k = 0; k < chars1.length; k++) {
                    if (words[i].toLowerCase().charAt(j) == chars1[k]) num1++;
                    if(num1 == words[i].length()) {
                        list.add(words[i]);
                        break;
                    }
                }
                for (int k = 0; k < chars2.length; k++) {
                    if (words[i].toLowerCase().charAt(j) == chars2[k]) num2++;
                    if(num2 == words[i].length()) {
                        list.add(words[i]);
                        break;
                    }
                }
                for (int k = 0; k < chars3.length; k++) {
                    if (words[i].toLowerCase().charAt(j) == chars3[k]) num3++;
                    if(num3 == words[i].length()) {
                        list.add(words[i]);
                        break;
                    }
                }
            }
        }
        return list.toArray(result);
    }
}
