两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。
给出两个整数 x 和 y，计算它们之间的汉明距离。

注意：
0 ≤ x, y < 231.

示例:
输入: x = 1, y = 4
输出: 2

解释:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
上面的箭头指出了对应二进制位不同的位置。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/hamming-distance
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

法一：
class Solution {
    public int hammingDistance(int x, int y) {
        String strx = Integer.toBinaryString(x);
        String stry = Integer.toBinaryString(y);
        StringBuilder builder1 = new StringBuilder();
        StringBuilder builder2 = new StringBuilder();
        int num = 0;
        if(strx.length() > stry.length()) {
            for(int i = 0; i < strx.length() - stry.length(); i++)
                builder1.append("0");
            builder1.append(stry);
            stry = builder1.toString();
        }
        else if(strx.length() < stry.length()) {
            for(int i = 0; i < stry.length() - strx.length(); i++)
                builder2.append("0");
            builder2.append(strx);
            strx = builder2.toString();
        }
        for(int i = 0; i < strx.length(); i++) {
            if(strx.charAt(i) != stry.charAt(i)) num++;
        }
        return num;
    }
}

法二：
class Solution {
    public int hammingDistance(int x, int y) {
        int sum=0;
        while(x!=0||y!=0)
        {
            if(((x%2)^(y%2))==1)
                sum++;
            x/=2;
            y/=2;
        }
        return sum;
    }
}
