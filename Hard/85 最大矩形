给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。

示例:
输入:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
输出: 6

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximal-rectangle
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int maximalRectangle(char[][] matrix) {
        int maxSquare = 0;
        if(matrix.length == 0) return maxSquare;
        int[][] heights = new int[matrix.length][matrix[0].length];
        for(int i = 0; i < heights[0].length; i++) {
            for(int j = 0; j < heights.length;j++) {
                heights[j][i] = Integer.parseInt(String.valueOf(matrix[j][i]));
            }
        }
        for(int i = 0; i < heights[0].length; i++) {
            for(int j = 1; j < heights.length;j++) {
                if(heights[j-1][i] > 0 && heights[j][i] != 0) heights[j][i] = heights[j-1][i] + 1;
            }
        }
        int arr[] = new int[heights[0].length];
        for(int i = 0; i < heights.length; i++) {
            System.arraycopy(heights[i],0,arr,0,arr.length);
            maxSquare = Math.max(maxSquare,largestRectangleArea(arr));
        }
        return maxSquare;
    }
    
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        int maxarea = 0;
        for(int i = 0; i < heights.length; i++) {
            while (stack.peek() != -1 && heights[i] <= heights[stack.peek()])
                maxarea = Math.max(maxarea,heights[stack.pop()] * (i-stack.peek()-1));
            stack.push(i);
        }
        while (stack.peek() != -1) {
            maxarea = Math.max(maxarea,heights[stack.pop()] * (heights.length-stack.peek()-1));
        }
        return maxarea;
    }
}
