编写一个程序，通过已填充的空格来解决数独问题。
一个数独的解法需遵循如下规则：
    数字 1-9 在每一行只能出现一次。
    数字 1-9 在每一列只能出现一次。
    数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
空白格用 '.' 表示。
一个数独。
答案被标成红色。

Note:
    给定的数独序列只包含数字 1-9 和字符 '.' 。
    你可以假设给定的数独只有唯一解。
    给定数独永远是 9x9 形式的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sudoku-solver
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    static class StopException extends RuntimeException{}
    public void solveSudoku(char[][] board) {
        try {
            putSudoku(board,0,0);
        } catch (StopException e) {

        }
    }

    public void putSudoku(char[][] board, int row, int col) {
        if (board[row][col] == '.') {
            Set<Character> listRow = new HashSet<>();
            Set<Character> listCol = new HashSet<>();
            Set<Character> listRoom = new HashSet<>();
            for (int i = 0; i < 9; i++) {
                listRow.add(board[row][i]);
                listCol.add(board[i][col]);
            }
            for (int i = 0; i < 3; i++) {
                listRoom.add(board[row/3*3][col/3*3+i]);
                listRoom.add(board[row/3*3+1][col/3*3+i]);
                listRoom.add(board[row/3*3+2][col/3*3+i]);
            }
            for (int k = 1; k <= 9; k++) {
                char tmp = (char)(48+k);
                if (!listRow.contains(tmp) && !listCol.contains(tmp) && !listRoom.contains(tmp)) {
                    board[row][col] = tmp;
                    if (row == board.length-1 && col == board[0].length-1) {
                        throw new StopException();
                    }
                    if (col == 8) putSudoku(board, row+1, 0);
                    else putSudoku(board,row,col+1);
                    board[row][col] = '.';
                }
            }
        } else {
            if (row == board.length-1 && col == board[0].length-1) {
                throw new StopException();
            }
            if (col == 8) putSudoku(board, row+1, 0);
            else putSudoku(board,row,col+1);
        }
    }
}
